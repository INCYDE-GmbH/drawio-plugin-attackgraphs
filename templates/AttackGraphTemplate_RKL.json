{"ag_type":"template","ag_version":1,"default_attributes":[{"name":"Resources","value":"","iconName":"hammer","min":"0","max":"5"},{"name":"Knowledge","value":"","iconName":"lightbulb","min":"0","max":"5"},{"name":"Location","value":"","iconName":"map_pin_ellipse","min":"0","max":"1"},{"name":"Impact","value":"","iconName":"flame","min":"0","max":"5"}],"computed_attributes":[{"name":"default","fn":"function (collection) { \n    var colorMatrix = {\n        5: {\"fillColor\": \"#cc0000\", \"fontColor\": \"#ffffff\"},\n        4: {\"fillColor\": \"#ff4000\", \"fontColor\": \"#ffffff\"},\n        3: {\"fillColor\": \"#ffdd00\", \"fontColor\": \"#000000\"},\n        2: {\"fillColor\": \"#d4ff00\", \"fontColor\": \"#000000\"},\n        1: {\"fillColor\": \"#40ff00\", \"fontColor\": \"#000000\"}\n    }\n    var matrix = [ \n        [5, 5, 4, 3, 2], \n        [5, 4, 4, 3, 2], \n        [5, 4, 4, 3, 2], \n        [4, 3, 3, 2, 1], \n        [3, 2, 2, 1, 1], \n    ];\n    var result = {};\n    \n    if (\"Knowledge\" in collection.cellAttributes && \"Resources\" in collection.cellAttributes) {\n        var knowledgeIndex = parseInt(collection.cellAttributes[\"Knowledge\"]) - 1; \n        var resourcesIndex = parseInt(collection.cellAttributes[\"Resources\"]) - 1;\n        \n        var value = Math.min(5, \n            Math.max(collection.globalAttributes[\"Location\"].max, \n                Math.max( matrix[knowledgeIndex][resourcesIndex] - parseInt(collection.cellAttributes[\"Location\"])) \n            ));\n        result = colorMatrix[value] || result;\n        result[\"value\"] = value;\n    }\n    \n    return result;\n}","id":"dbg60ff69g9a","default":["activity_w","activity_g","activity_y"]},{"name":"Risk","fn":"function(collection){\n    var riskMatrix = {\n        \"V\": {\"fillColor\": \"#cc0000\", \"fontColor\": \"#ffffff\"},\n        \"S\": {\"fillColor\": \"#ff4000\", \"fontColor\": \"#ffffff\"},\n        \"M\": {\"fillColor\": \"#ffdd00\", \"fontColor\": \"#000000\"},\n        \"L\": {\"fillColor\": \"#40ff00\", \"fontColor\": \"#000000\"},\n    };\n    var result = {};\n    \n    if (\"_risk\" in collection.cellAttributes) {\n        var risk = collection.cellAttributes[\"_risk\"];\n        result = riskMatrix[risk] || result;\n        result[\"value\"] = risk;\n    }\n    \n    return result; \n}","id":"6c831697g9i0a","default":["consequence"]}],"aggregation_functions":[{"name":"default","fn":"function (collection) { \n    var result = null; \n    if (collection.childAttributes.length == 1) { \n        result = collection.childAttributes[0].attributes;\n        result._marking = collection.childAttributes[0].id;\n    } else { \n        var candidates = []; \n        var worstValue = 0; \n        collection.childAttributes.forEach(function(child) { \n            var value = parseInt(child.computedAttribute); \n            if (value > worstValue) { \n                worstValue = value; \n                candidates = []; \n                candidates.push(child); \n            } else if (value == worstValue) { \n                candidates.push(child); \n            } \n        }); \n        var tiebreaker = function(candidates, name, max) { \n            var min_value = max; \n            candidates.forEach(function(node) { \n                min_value = Math.min(min_value, node.attributes[name]); \n            }); \n            result = []; \n            candidates.forEach(function(node) { \n                if (node.attributes[name] == min_value) { \n                    result.push(node); \n                } \n            }); \n            return result; \n        }; \n        if (candidates.length > 1) { \n            candidates = tiebreaker(candidates, \"Resources\", collection.globalAttributes[\"Resources\"].max); \n            if (candidates.length > 1) { \n                candidates = tiebreaker(candidates, \"Knowledge\", collection.globalAttributes[\"Knowledge\"].max); \n            } \n        } \n        result = candidates[0].attributes;\n        result._marking = candidates[0].id;\n    } \n    return result; \n}","id":"6b1d22791hih8","default":["activity_w","link"]},{"name":"AND","fn":"function (collection) { \n    var result = {}; \n    var ids = [];\n    collection.childAttributes.forEach(function(child) { \n    for (var attribute in child.attributes) { \n            if (attribute in result) { \n                result[attribute] += parseInt(child.attributes[attribute]); \n            } else { \n                result[attribute] = parseInt(child.attributes[attribute]); \n            } \n        }\n        ids.push(child.id);\n    }); \n    for (var attribute in result) { \n        if (attribute in collection.globalAttributes) { \n            result[attribute] = Math.min(collection.globalAttributes[attribute].max, result[attribute]); \n        } \n    }\n    result._marking = ids.join(\";\");\n    return result; \n}","id":"gf0d4f199018","default":["and"]},{"name":"Security Control","fn":"function (collection) { \n    var result = {}; \n    for (var attribute in collection.localAttributes) { \n        result[attribute] = parseInt(collection.localAttributes[attribute]); \n    } \n    collection.childAttributes.forEach(function(child) { \n        for (var attribute in child.attributes) { \n            if (attribute in collection.globalAttributes) { \n                if (attribute in result) { \n                    result[attribute] += parseInt(child.attributes[attribute]); \n                } \n            } \n        } \n    }); \n    for (var attribute in result) { \n        if (attribute in collection.globalAttributes) { \n            result[attribute] = Math.min(collection.globalAttributes[attribute].max, result[attribute]); \n        } \n    } \n    return result; \n}","id":"73f575i0ghij5","default":["activity_g","activity_y"]},{"name":"Risk","fn":"function (collection) {  \n    var maxRisk = \"L\"; \n    var matrix = [ \n        [\"L\", \"L\", \"L\", \"L\", \"L\"], \n        [\"L\", \"L\", \"M\", \"M\", \"M\"], \n        [\"L\", \"M\", \"M\", \"S\", \"S\"], \n        [\"L\", \"M\", \"S\", \"V\", \"V\"], \n        [\"L\", \"M\", \"S\", \"V\", \"V\"], \n    ];\n    var updatedImpacts = [];\n    var ids = [];\n \n    var compareRisk = function(risk1, risk2) { \n        /*\n        * Returns:\n        *  - Null: if one of the parameters is not a character representing a risk\n        *  - Negativ integer: if risk1 < risk2\n        *  - Zero: if risks are equal\n        *  - Positive integer: if risk1 > risk2\n        */\n        var values = [\"L\", \"M\", \"S\", \"V\"]; \n        var index_risk1 = values.indexOf(risk1); \n        var index_risk2 = values.indexOf(risk2); \n \n        if (index_risk1 == -1 || index_risk2 == -1) { \n            return null; \n        } \n        return index_risk1 - index_risk2; \n \n    } \n     \n    collection.childAttributes.forEach(function(child) {  \n        var impact = 1;  \n        if (child.edgeWeight !== null) {  \n            impact = parseInt(child.edgeWeight);  \n        }\n        var _impact = parseInt(child.attributes._impact) || 0;\n        impact = Math.max(impact - _impact, 1);\n        updatedImpacts.push(child.id + ':' + impact);\n        var af = parseInt(child.computedAttribute) || parseInt(child.attributes._af);\n        risk = matrix[af - 1][impact - 1];\n        result = compareRisk(risk, maxRisk);\n        if (result > 0) { \n            maxRisk = risk;\n            ids = [child.id];\n        } else if (result == 0){\n            ids.push(child.id);\n        }\n    });  \n  \n    var result = {'_risk': maxRisk, \"_marking\": ids.join(\";\")};\n    if (updatedImpacts.length > 0) {\n        result._weight = updatedImpacts.join(';');\n    }\n    return result;\n}","id":"egf49jfgj408","default":["consequence"]},{"name":"Impact","fn":"function(collection) {\n    var impact = 0;\n    var result = {}\n    \n    collection.childAttributes.forEach(function(child) {\n        if (\"Impact\" in child.attributes) {\n            impact += parseInt(child.attributes[\"Impact\"]);\n        } else if (\"Resources\" in child.attributes && \"Knowledge\" in child.attributes && \"Location\" in child.attributes) {\n            result._af = child.computedAttribute\n            result._marking = child.id;\n        }\n    });\n    result._impact = Math.min(impact, collection.globalAttributes[\"Impact\"].max);\n    \n    return result;\n}","id":"3j7heb16d5f6","default":[""]}]}